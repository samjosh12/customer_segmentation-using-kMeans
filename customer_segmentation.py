# -*- coding: utf-8 -*-
"""customer_segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LiNyz2KjPOZXWbij99-iaska6YtSzl5Z

#import libararies
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler,LabelEncoder
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report,confusion_matrix

from google.colab import files
uploaded=files.upload()

for files in uploaded.keys():
  data=pd.read_csv(files)

"""#Data exploration"""

print(data.head())
print(data.info())
print(data.describe())

"""#data preprocessing"""

data.drop(columns=['Customer_ID', 'Customer_Since'], inplace=True)

data.fillna(data.median(numeric_only=True),inplace=True)

l1=LabelEncoder()
data['Membership_Tier']=l1.fit_transform(data['Membership_Tier'])
data['Education_Level']=l1.fit_transform(data['Education_Level'])

data=pd.get_dummies(data,columns=['Device_Type','Marital_Status'],drop_first=True)
data

"""#Feature engineering"""

data['Total_kids']=data['Kids_Home']+data['Teens_Home']
data['Income_per_person']=data['Annual_Income']/(data['Family_Size']+1)

"""EDA"""

plt.figure(figsize=(10,6))
sns.histplot(data['Total_Amount_Spent'], bins=30, kde=True)
plt.title("Total Amount Spent Distribution")
plt.show()

sns.boxplot(x='Membership_Tier', y='Total_Amount_Spent', data=data)
plt.title("Spending by Membership Tier")
plt.show()

"""#clustering"""

features=['Total_Amount_Spent','Last_Purchase_Recency','Customer_Age','Annual_Income','Total_kids']
X=data[features]
print(X)
scaler=StandardScaler()
X_scaled=scaler.fit_transform(X)

kmeans=KMeans(n_clusters=4,random_state=42)
data['Cluster']=kmeans.fit_predict(X_scaled)
pca=PCA(n_components=2)
X_pca=pca.fit_transform(X_scaled)
data['PCA1']=X_pca[:,0]
data['PCA2']=X_pca[:,1]

plt.figure(figsize=(10,6))
sns.scatterplot(x='PCA1',y='PCA2',hue='Cluster',data=data,palette='viridis')
plt.title("Customer Clusters")
plt.show()

"""#classification:High value customer"""

data['High_Spender']=data['Total_Amount_Spent']>data['Total_Amount_Spent'].median()
y=data['High_Spender']
print(y)
X_cls=data.drop(columns=['High_Spender','Cluster','PCA1','PCA2','Country','City'])
print(X_cls.info())
X_train, X_test, y_train, y_test = train_test_split(X_cls, y, test_size=0.2, random_state=42)
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)
print("Classification Report:")
print(classification_report(y_test, y_pred))

sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt="d")
plt.title("Confusion Matrix")
plt.show()

summary=data.groupby('Cluster')[features+['High_Spender']].mean()
summary

data.to_csv("customer_segmented_output_improved.csv", index=False)